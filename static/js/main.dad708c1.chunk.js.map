{"version":3,"sources":["Components/General/Album.js","Components/Home/RecentlyPlayed.js","Components/Home/NewReleases.js","Components/General/Artist.js","Components/Home/TopArtists.js","Components/Home/TopTracks.js","Components/Home/Home.js","Components/Login/Login.js","util/apiURL.js","Components/Library/LibraryNav.js","Components/General/Playlist.js","Components/General/CollectionTracks.js","Components/Library/LibraryPlaylists.js","Components/Library/LibraryArtists.js","Components/Library/LibraryAlbums.js","Components/Library/Library.js","Components/Navbar/Navbar.js","Components/General/Track.js","Components/DisplayComponents/DisplayAlbum/DisplayAlbum.js","Components/DisplayComponents/DisplayArtist/DisplayArtist.js","Components/DisplayComponents/DisplayPlaylist/DisplayPlaylist.js","Components/DisplayComponents/DisplayPlaylist/DisplayLibraryTracks.js","Components/Playback/Playback.js","App.js","serviceWorker.js","index.js"],"names":["Album","img","name","artist","id","to","className","src","alt","length","slice","RecentlyPlayed","spotifyWebApi","useState","recents","setRecents","getRecents","a","getMyRecentlyPlayedTracks","res","items","useEffect","recentlyPlayed","recentlyPlayedCount","recentTracks","map","recent","track","album","artists","images","url","key","NewReleases","newReleases","setNewReleases","getReleases","getNewReleases","albums","releases","release","i","Artist","tag","toUpperCase","TopArtists","topArtists","setTopArtists","getTopArtists","getMyTopArtists","artistsToShow","type","TopTracks","topTracks","setTopTracks","getTopTracks","getMyTopTracks","tracksToShow","Home","token","Login","props","API","window","location","hostname","href","LibraryNav","exact","Playlist","owner","CollectionTracks","LibraryPlaylists","playlists","setPlaylists","getPlaylists","getUserPlaylists","limit","playlistsDisplay","playlist","description","display_name","desc","unshift","LibraryArtists","setArtists","getArtists","getFollowedArtists","artistDisplay","LibraryAlbums","setAlbums","getAlbums","getMySavedAlbums","albumDisplay","Library","from","path","Navbar","playlistList","playlistId","displayName","Track","context","position","runTime","duration_ms","contextId","useParams","time","ms","minutes","Math","floor","seconds","toFixed","msToMinutesAndSeconds","playSong","getMyDevices","devices","every","device","is_active","transferMyPlayback","play","context_uri","offset","console","log","uris","onClick","DisplayAlbum","tracks","setTracks","gotTracks","setGotTracks","setOffset","setAlbum","gotAlbum","setGotAlbum","getAlbumTracks","useBottomScrollListener","getAlbum","displayTracks","trackProps","DisplayArtist","setArtist","singles","setSingles","gotArtist","setGotArtist","gotAllAlbums","getArtist","getArtistTopTracks","setAlbumType","albumList","albumTypeAlbum","albumTypeSingle","seen","album_type","push","getArtistAlbums","displayTop","displayAlbums","displaySingles","single","DisplayPlaylist","setPlaylist","gotPlaylist","setGotPlaylist","getPlaylistTracks","getPlaylist","total","DisplayLibraryTracks","totalTracks","setTotalTracks","getLikedTracks","getMySavedTracks","Playback","currentlyPlaying","setCurrentPlaying","getPlaybackTrack","getMyCurrentPlayingTrack","item","getPlaybackState","getMyCurrentPlaybackState","is_playing","Spotify","App","loggedIn","setLoggedIn","access_token","e","hashParams","r","q","hash","substring","exec","decodeURIComponent","getHashParams","setAccessToken","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dad708c1.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Album = ({img, name, artist, id}) => {\n    return (\n        <Link to={`/album/${id}`} className=\"displayAnchor\">\n            <div className=\"libraryAlbum\">\n                <img src={img} alt=\"album\" className=\"albumImg\"/>\n                <p className=\"albumName\">{name.length <= 16 ? name : name.slice(0, 16) + \"...\"}</p>\n                <p className=\"albumArtist\">{artist}</p> \n            </div>\n        </Link>\n        \n    )\n}\n\nexport default Album;","import React, { useState, useEffect } from 'react';\nimport Album from '../General/Album';\n\nconst RecentlyPlayed = ({spotifyWebApi}) => {\n    const [recents, setRecents] = useState([]);\n\n    const getRecents = async () => {\n        let res = await spotifyWebApi.getMyRecentlyPlayedTracks();\n        setRecents(res.items);\n    }\n\n    useEffect(() => {\n        getRecents();\n    }, [])\n\n    let recentlyPlayed = {}\n    let recentlyPlayedCount = 0;\n    let recentTracks = recents.map((recent) => {\n        if(recentlyPlayedCount > 5) return null\n        let { track } = recent;\n        const { album, artists } = track\n        const { id, name, images } = album\n        if(!recentlyPlayed[id]) {\n            recentlyPlayed[id] = 1;\n            recentlyPlayedCount++;\n            return <Album name={name} img={images[0].url} artist={artists[0].name} id={id} key={id} />\n        } else {\n            return null;\n        }\n    });\n    \n    return (\n        <div className=\"homeListContainer\">\n            <h2>Recently Played</h2>\n            <div id=\"recents\">\n                {recentTracks}\n            </div>\n        </div>\n    )\n}\n\nexport default RecentlyPlayed;","import React, { useState, useEffect } from 'react';\nimport Album from '../General/Album';\n\nconst NewReleases = ({spotifyWebApi}) => {\n    const [newReleases, setNewReleases] = useState([]);\n    \n    const getReleases = async () => {\n        let res = await spotifyWebApi.getNewReleases();\n        setNewReleases(res.albums.items)\n    }\n\n    useEffect(() => {\n        getReleases();\n    }, [])\n\n    let releases = newReleases.map((release, i) => {\n        if(i > 5) return null;\n        const {name, images, artists, id} = release\n        return <Album name={name} img={images[0].url} artist={artists[0].name} id={id} key={id}/>\n    })\n\n    return (\n        <div className=\"homeListContainer\">\n            <h2>New Releases</h2>\n            <div id=\"newReleases\">\n                {releases}\n            </div>\n        </div>\n    )\n}\n\nexport default NewReleases;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Artist = ({name, img, tag, id}) => {\n    return (\n        <Link to={`/artist/${id}`} className=\"displayAnchor\">\n            <div className=\"artist\">\n                <img src={img} alt=\"artist\" className=\"artistImg\"/>\n                <p className=\"artistName\">{name.length <= 17 ? name : name.slice(0, 17) + \"...\"}</p>\n                <p className=\"artistTag\">{tag[0].toUpperCase() + tag.slice(1)}</p>\n            </div>\n        </Link>\n    )\n}\n\nexport default Artist;","import React, { useState, useEffect } from 'react';\nimport Artist from './../General/Artist';\n\nconst TopArtists = ({spotifyWebApi}) => {\n    const [topArtists, setTopArtists] = useState([]);\n\n    const getTopArtists = async () => {\n        let res = await spotifyWebApi.getMyTopArtists();\n        setTopArtists(res.items);\n    }\n\n    useEffect(() => {\n        getTopArtists();\n    }, [])\n\n    let artistsToShow = topArtists.map((artist, i) => {\n        if(i > 5) return null;\n        const {name, images, type, id} = artist;\n        return <Artist name={name} img={images[0].url} tag={type} id={id} key={id}/>\n    });\n    \n    return (\n        <div className=\"homeListContainer\">\n            <h2>Your Top Artists</h2>\n            <div id=\"topArtists\">\n                {artistsToShow}\n            </div>\n        </div>\n    )\n}\n\nexport default TopArtists;","import React, { useState, useEffect } from 'react';\nimport Album from './../General/Album';\n\nconst TopTracks = ({spotifyWebApi}) => {\n    const [topTracks, setTopTracks] = useState([]);\n\n    const getTopTracks = async () => {\n        let res = await spotifyWebApi.getMyTopTracks();\n        setTopTracks(res.items);\n    }\n\n    useEffect(() => {\n        getTopTracks();\n    }, [])\n\n    let tracksToShow = topTracks.map((track, i) => {\n        if(i > 5) return null;\n        const {name, album, artists, id} = track\n        return <Album name={name} img={album.images[0].url} artist={artists[0].name} id={album.id} key={id}/>\n    });\n    \n    return (\n        <div className=\"homeListContainer\">\n            <h2>Your Top Tracks</h2>\n            <div id=\"topTracks\">\n                {tracksToShow}\n            </div>\n        </div>\n    )\n}\n\nexport default TopTracks;","import React from 'react';\nimport RecentlyPlayed from './RecentlyPlayed';\nimport NewReleases from './NewReleases';\nimport TopArtists from './TopArtists';\nimport TopTracks from './TopTracks';\nimport './../../css/Home.css';\n\nconst Home = ({token, spotifyWebApi}) => {\n    return (\n        <div id=\"homeDiv\"> \n            <RecentlyPlayed token={token}  spotifyWebApi={spotifyWebApi}/>\n            <NewReleases token={token}  spotifyWebApi={spotifyWebApi} />\n            <TopArtists token={token} spotifyWebApi={spotifyWebApi} />\n            <TopTracks token={token} spotifyWebApi={spotifyWebApi} />\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './../../css/Login.css';\nimport { apiURL } from '../../util/apiURL';\n\nconst Login = (props) => {\n    const API = apiURL();\n\n    return (\n        <div>\n            <a href={`${API}/login`}>\n                <button>Login With Spotify</button>\n            </a>\n        </div>\n    )\n} // End of Login() Component\n\nexport default Login;","export const apiURL = () => {\n    return window.location.hostname === \"localhost\" ?\n    \"http://localhost:8888\" : \"https://my-spotify-app-backend.herokuapp.com\";\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './../../css/LibraryNav.css';\n\nconst LibraryNav = (props) => {\n    return (\n        <nav id=\"libraryNav\">\n            <NavLink exact to={\"/collection/playlists\"}>PLAYLISTS</NavLink>\n            <NavLink exact to={\"/collection/artists\"}>ARTISTS</NavLink>\n            <NavLink exact to={\"/collection/albums\"}>ALBUMS</NavLink>\n        </nav>\n    )\n}\n\nexport default LibraryNav;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Playlist = ({img, name, owner, id}) => {\n    if(owner) {\n        return (\n            <Link to={`/playlist/${id}`} className=\"displayAnchor\">\n                <div className=\"libraryPlaylist\">\n                    <img src={img} alt=\"playlist\" className=\"playlistImg\" />\n                    <p className=\"playlistName\">{name.length <= 17 ? name : name.slice(0, 17) + \"...\"}</p>\n                    <p className=\"playlistOwner\">By {owner.length <= 17 ? owner : owner.slice(0, 17) + \"...\"}</p>\n                </div>\n            </Link>\n        )\n    } else {\n        return (\n            <div className=\"libraryPlaylist\">\n                <img src={img} alt=\"playlist\" className=\"playlistImg\" />\n                <p className=\"playlistName\">{name.length <= 17 ? name : name.slice(0, 17) + \"...\"}</p>\n            </div>\n        )\n    }\n\n}\n\nexport default Playlist","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CollectionTracks = ({img, name}) => {\n    return (\n        <Link to={`/tracks`} className=\"displayAnchor\">\n        <div className=\"libraryPlaylist\">\n            <img src={img} alt=\"playlist\" className=\"playlistImg\" />\n            <p className=\"playlistName\">{name.length <= 17 ? name : name.slice(0, 17) + \"...\"}</p>\n        </div>\n    </Link>\n    )\n}\n\nexport default CollectionTracks;","import React, { useState, useEffect } from 'react';\nimport Playlist from '../General/Playlist';\nimport CollectionTracks from '../General/CollectionTracks';\n\nconst LibraryPlaylists = ({spotifyWebApi}) => {\n    const [playlists, setPlaylists] = useState([]);\n\n    const getPlaylists = async () => {\n        let res = await spotifyWebApi.getUserPlaylists({limit: 50});\n        setPlaylists(res.items)\n    }\n\n    useEffect(() => {\n        getPlaylists();\n    }, [])\n\n    let playlistsDisplay = playlists.map(playlist => {\n        const {images, name, owner, description, id} = playlist\n        return <Playlist img={images[0].url} name={name} owner={owner.display_name} desc={description} id={id} key={id}/>\n    })\n\n    let img = \"https://t.scdn.co/images/3099b3803ad9496896c43f22fe9be8c4.png\"\n    playlistsDisplay.unshift(\n        <CollectionTracks img={img} name={\"Liked Songs\"} key={\"likedSongs\"} />\n    )\n    \n    return (\n         <div id=\"libraryPlaylists\">\n            {playlistsDisplay}\n        </div>\n    )\n}\n\nexport default LibraryPlaylists","import React, {useState, useEffect} from 'react';\nimport Artist from './../General/Artist.js';\nimport './../../css/LibraryArtist.css';\n\nconst LibraryArtists = ({spotifyWebApi}) => {\n    const [artists, setArtists] = useState([]);\n\n    const getArtists = async () => {\n        let res = await spotifyWebApi.getFollowedArtists({limit: 50});\n        setArtists(res.artists.items)\n    }\n\n    useEffect(() => {\n        getArtists();\n    }, [])\n\n    let artistDisplay = artists.map(artist => {\n        const {images, name, type, id} = artist;\n        let img = images[0];\n        let backup = 'https://ya-webdesign.com/transparent250_/blank-profile-picture-png-2.png';\n        return <Artist img={img ? img.url : backup} name={name} tag={type} id={id} key={id}/>\n    })\n    \n    return (\n        <div id=\"libraryArtists\">\n            {artistDisplay}\n        </div>\n    )\n}\n\nexport default LibraryArtists","import React, { useState, useEffect } from 'react';\nimport Album from './../General/Album';\n\n\nconst LibraryAlbums = ({spotifyWebApi}) => {\n    const [albums, setAlbums] = useState([]);\n\n    const getAlbums = async () => {\n        let res = await spotifyWebApi.getMySavedAlbums({limit: 50});\n        setAlbums(res.items)\n    }\n\n    useEffect(() => {\n        getAlbums();\n    }, [])\n\n    let albumDisplay = albums.map(({album}) => {\n        const {images, name, artists, id} = album;\n        return <Album img={images[0].url} name={name} artist={artists[0].name} id={id} key={id}/>\n    })\n    \n    return (\n        <div id=\"libraryAlbums\">\n            {albumDisplay}\n        </div>\n    )\n}\n\nexport default LibraryAlbums;","import React from 'react';\nimport LibraryNav from './LibraryNav';\nimport LibraryPlaylists from './LibraryPlaylists';\nimport LibraryArtists from './LibraryArtists';\nimport LibraryAlbums from './LibraryAlbums';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './../../css/Library.css';\n \nconst Library = ({spotifyWebApi}) => {\n    return (\n        <div>\n         <div id=\"library\">\n            <LibraryNav />\n            <Switch>\n                <Redirect exact from=\"/collection\" to=\"/collection/playlists\" />\n                <Route path={\"/collection/playlists\"}>\n                    <LibraryPlaylists spotifyWebApi={spotifyWebApi} />\n                </Route>\n                <Route path={\"/collection/artists\"}>\n                    <LibraryArtists spotifyWebApi={spotifyWebApi} />\n                </Route> \n                <Route path={\"/collection/albums\"}>\n                <LibraryAlbums spotifyWebApi={spotifyWebApi} />\n                </Route> \n            </Switch>\n        </div>\n     </div>\n    )\n}\n\nexport default Library;","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './../../css/Navbar.css';\n\nconst Navbar = ({ spotifyWebApi }) => {\n    const [playlists, setPlaylists] = useState([]);\n\n    const getPlaylists = async () => {\n        const res = await spotifyWebApi.getUserPlaylists();\n        res.items ? setPlaylists(res.items) : setPlaylists([]);\n    }\n\n    useEffect(() => {\n        getPlaylists()\n    }, [])\n\n    const playlistList = playlists.map(playlist => {\n        const { name, id: playlistId } = playlist;\n        let displayName = \"\";\n        if(name.length > 13) {\n            if(name[13] === \" \") {\n                displayName = name.slice(0, 13) + \"...\"\n            } else {\n                displayName = name.slice(0, 14) + \"...\"\n            }\n        } else {\n            displayName = name;\n        }\n\n        return (\n            <NavLink to={`/playlist/${playlistId}`} key={playlistId}>{displayName}</NavLink>\n        )\n    })\n    \n    return (\n        <nav id=\"nav\">\n            <NavLink exact to={\"/\"}>HOME</NavLink>\n            <NavLink to={\"/collection\"}>LIBRARY</NavLink>\n\n            <h5>Playlists</h5>\n            <hr />\n\n            <div className=\"navPlaylists\">\n                <NavLink to={\"/tracks\"}>Liked Songs</NavLink>\n                {playlistList}\n            </div>\n        </nav>    \n    )\n} // End of Navbar Component\n\nexport default Navbar;","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst msToMinutesAndSeconds = (ms) => {\n    let minutes = Math.floor(ms / 60000);\n    let seconds = ((ms % 60000) / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n}\n\nconst Track = ({ track, context, position, spotifyWebApi }) => {\n    const { duration_ms: runTime, name, artists } = track;\n    const [ { name: artist } ] = artists;\n    const { id: contextId } = useParams();\n    \n    let time = msToMinutesAndSeconds(runTime);\n\n    const isValidContext = () => {\n        return context === \"album\" || context === \"playlist\";\n    }\n\n    const playSong = async () => {\n        try {\n            const { devices } = await spotifyWebApi.getMyDevices();\n            const noActiveDevice = devices.every(device => device.is_active === false);\n            if(noActiveDevice) {\n                const [ device ] = devices;\n                spotifyWebApi.transferMyPlayback([device.id]);\n            }\n            if(isValidContext()) {\n                spotifyWebApi.play({context_uri: `spotify:${context}:${contextId}`, offset: {position} })\n            } else {\n                console.log(track.id)\n                spotifyWebApi.play({uris: [`spotify:track:${track.id}`]});\n            }\n        } catch ( error ) {\n            console.log(error)\n        }\n    }\n    \n    return (\n        <div className=\"displayTrack\" onClick={playSong}>\n            <div className=\"displayLeft\">\n                <p className=\"songTitle\">{name}</p>\n                <p className=\"songArtist\">{artist}</p>\n            </div>\n            <div className=\"displayRight\">\n                <p>{time}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Track;","import React, { useState, useEffect, } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport Track from '../../General/Track';\nimport './../../../css/DisplayComponents/DisplayTracks.css';\n\nconst DisplayAlbum = ({spotifyWebApi}) => {\n    const { id } = useParams();\n    const [tracks, setTracks] = useState([]);\n    const [gotTracks, setGotTracks] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [album, setAlbum] = useState({});\n    const [gotAlbum, setGotAlbum] =useState(false);\n\n    const getAlbumTracks = async () => {\n        let res = await spotifyWebApi.getAlbumTracks(id, {offset, limit: 50});\n        setTracks([...tracks, ...res.items]);\n\n        if(!gotTracks) {\n            setOffset(51);\n            setGotTracks(true);\n        } else {\n            setOffset(offset + 50)\n        }\n    }\n\n    useBottomScrollListener(getAlbumTracks);\n\n    const getAlbum = async () => {\n        let res = await spotifyWebApi.getAlbum(id);\n        setAlbum(res);\n        setGotAlbum(true);\n    }\n\n    useEffect(() => {\n        if(!gotAlbum || !gotTracks) {\n            getAlbum();\n            getAlbumTracks();\n        }\n    }, [])\n    \n    if(gotAlbum) {\n        let displayTracks = tracks.map((track, i) => {\n            const trackProps = {\n                track,\n                key: i,\n                spotifyWebApi,\n                context: \"album\",\n                position: i\n            }\n            return <Track {...trackProps} />\n        });\n        \n        return (\n            <div className=\"displayTracks\">\n                <section className=\"displayInfo\">\n                    <img src={album.images[0].url} alt=\"album Cover\" className=\"displayCover\"/>\n                    <h1 className=\"displayName\">{album.name}</h1>\n                    <p className=\"displayOwner\">{album.artists[0].name}</p>\n                    <p className=\"displayLength\">{album.tracks.items.length} SONGS</p>\n                </section>\n                <section className=\"displayAllTracks\">\n                    {displayTracks}\n                </section>\n            </div>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n    \n}\n\nexport default DisplayAlbum;","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport Track from '../../General/Track';\nimport Album from '../../General/Album';\nimport './../../../css/DisplayComponents/DisplayArtist.css';\n\nconst DisplayArtist = ({spotifyWebApi}) => {\n    const { id } = useParams();\n    const [artist, setArtist] = useState({});\n    const [topTracks, setTopTracks] = useState([]);\n    const [albums, setAlbums] = useState([]);\n    const [singles, setSingles] = useState([]);\n    const [gotArtist, setGotArtist] =useState(false);\n    const [gotAllAlbums, setGotAllAlbums] = useState(false);\n    const [offset, setOffset] = useState(0);\n\n    const getArtist = async () => {\n        let res = await spotifyWebApi.getArtist(id);\n        setArtist(res);\n        setGotArtist(true);\n    }\n\n    const getTopTracks = async () => {\n        let res = await spotifyWebApi.getArtistTopTracks(id, \"US\");\n        setTopTracks(res.tracks);\n    }\n\n    const setAlbumType = (albumList) => {\n        let albumTypeAlbum = [];\n        let albumTypeSingle = [];\n        let seen = {}\n        if(!gotAllAlbums) {\n            for(let i = 0; i < albumList.length; i++) {\n                const album = albumList[i];\n                const {album_type, name, artists} = album;\n                if(artists[0].id === id) {\n                    if(album_type === \"album\" && seen[name] !== album_type) {\n                        seen[name] = album_type;\n                        albumTypeAlbum.push(album);\n                    } else if(album_type === \"single\" && seen[name] !== album_type) {\n                        seen[name] = album_type;\n                        albumTypeSingle.push(album);\n                    }\n                }\n            }\n\n            if(!offset) setOffset(51);\n            else setOffset(offset + 50);\n    \n            setSingles([...singles, ...albumTypeSingle]);\n            setAlbums([...albums, ...albumTypeAlbum]);\n        }\n    }\n\n    const getAlbums = async () => {\n        let res = await spotifyWebApi.getArtistAlbums(id, {offset, limit: 50});\n        setAlbumType(res.items);\n    }\n\n    useBottomScrollListener(getAlbums);\n\n    useEffect(() => {\n        getArtist();\n        getTopTracks();\n        getAlbums();\n    }, [])\n    \n    if(gotArtist) {\n        let displayTop = topTracks.map((track, i) => {\n            if(i > 4) return null;\n            const trackProps = {\n                track,\n                key: i,\n                spotifyWebApi,\n                context: \"artist\",\n                position: i\n            }\n            return <Track {...trackProps} />\n        })\n\n        let displayAlbums = albums.map(album => {\n            const {images, name, artists, id} = album;\n            return <Album img={images[0].url} name={name} artist={artists[0].name} id={id} key={id}/>\n        })\n\n        let displaySingles = singles.map(single => {\n            const {images, name, artists, id} = single;\n            return <Album img={images[0].url} name={name} artist={artists[0].name} id={id} key={id}/>\n        })\n        \n        return (\n            <div id=\"displayArtist\">\n                <section id=\"artistHeader\">\n                    <h1>{artist.name}</h1>\n                </section>\n                <h2>Top Tracks</h2>\n                <section id=\"artistTop\">\n                    {displayTop}\n                </section>\n                <h2>Albums</h2>\n                <section id=\"artistAlbums\">\n                    {displayAlbums}\n                </section>\n                <h2>Singles & EPs</h2>\n                <section id=\"artistSingles\">\n                    {displaySingles}\n                </section>\n            </div>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n\n}\n\nexport default DisplayArtist;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport Track from './../../General/Track';\nimport './../../../css/DisplayComponents/DisplayTracks.css';\n\nconst DisplayPlaylist = ({spotifyWebApi}) => {\n    const { id } = useParams();\n    const [tracks, setTracks] = useState([]);\n    const [gotTracks, setGotTracks] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [playlist, setPlaylist] = useState({});\n    const [gotPlaylist, setGotPlaylist] = useState(false);\n\n    const getPlaylistTracks = async () => {\n        let res = await spotifyWebApi.getPlaylistTracks(id, {offset, limit: 50});\n        setTracks([...tracks, ...res.items]);\n\n        if(!gotTracks) {\n            setOffset(51);\n            setGotTracks(true);\n        } else {\n            setOffset(offset + 50)\n        }\n    }\n\n    useBottomScrollListener(getPlaylistTracks);\n\n    const getPlaylist = async () => {\n        let res = await spotifyWebApi.getPlaylist(id);\n        setPlaylist(res);\n        setGotPlaylist(true);\n    }\n\n    useEffect(() => {\n        if(!gotPlaylist || !gotTracks) {\n            getPlaylist();\n            getPlaylistTracks();\n        }\n    }, [gotPlaylist])\n\n    const resetStates = () => {\n        setGotPlaylist(false);\n        setGotTracks(false);\n        setOffset(0);\n        setTracks([]);\n    }\n\n    useEffect(() => {\n        resetStates();\n    }, [id])\n\n    if(gotTracks && gotPlaylist) {\n        let displayTracks = tracks.map(({ track }, i) => {\n            const trackProps = {\n                track,\n                key: i,\n                spotifyWebApi,\n                context: \"playlist\",\n                position: i\n            }\n            return <Track {...trackProps} />\n        })\n\n        return (\n            <div className=\"displayTracks\">\n                <section className=\"displayInfo\">\n                    <img src={playlist.images[0].url} alt=\"Playlist Cover\" className=\"displayCover\" />\n                    <h1 className=\"displayName\">{playlist.name}</h1>\n                    <p className=\"displayOwner\">{playlist.owner ? playlist.owner.display_name : null}</p>\n                    <p className=\"displayLength\">{playlist.tracks.total} SONGS</p>\n                </section>\n                <section className=\"displayAllTracks\">\n                    {displayTracks}\n                </section>\n            </div>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n\n\n}\nexport default DisplayPlaylist;","import React, { useState, useEffect } from 'react';\nimport { useBottomScrollListener } from 'react-bottom-scroll-listener';\nimport Track from './../../General/Track';\nimport './../../../css/DisplayComponents/DisplayTracks.css';\n\nconst DisplayLibraryTracks = ({spotifyWebApi}) => {\n    const [tracks, setTracks] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [gotTracks, setGotTracks] = useState(false);\n    const [totalTracks, setTotalTracks] = useState(0);\n\n    const getLikedTracks = async () => {\n        let res = await spotifyWebApi.getMySavedTracks({offset, limit: 50});\n        setTracks([...tracks, ...res.items]);\n        \n        if(!gotTracks) {\n            setOffset(51);\n            setTotalTracks(res.total);\n            setGotTracks(true);\n        } else {\n            setOffset(offset + 50)\n        }\n    }\n\n    useBottomScrollListener(getLikedTracks);\n\n    useEffect(() => {\n        getLikedTracks();\n    }, [])\n\n    if(gotTracks) {\n        let displayTracks = tracks.map(({ track }, i) => {\n            const trackProps = {\n                track,\n                key: i,\n                spotifyWebApi,\n                context: \"library\"\n            }\n            return <Track {...trackProps} />\n        })\n\n        let img = \"https://t.scdn.co/images/3099b3803ad9496896c43f22fe9be8c4.png\"\n\n        return (\n            <div className=\"displayTracks\">\n                <section className=\"displayInfo\">\n                    <img src={img} alt=\"Playlist Cover\" className=\"displayCover\" />\n                    <h1>Liked Songs</h1>\n                    <p className=\"displayLength\">{totalTracks} SONGS</p>\n                </section>\n                <section className=\"displayAllTracks\">\n                    {displayTracks}\n                </section>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"displayTracks\"></div>\n        )\n    }\n\n\n}\nexport default DisplayLibraryTracks;","import React, { useState, useEffect } from 'react'\n\nconst Playback = ({spotifyWebApi}) => {\n    const [currentlyPlaying, setCurrentPlaying] = useState({});\n\n    const getPlaybackTrack = async () => {\n        let res = await spotifyWebApi.getMyCurrentPlayingTrack();\n        if(res.item) {\n            setCurrentPlaying(res.item);\n        } else {\n            setCurrentPlaying({});\n        }\n    }\n\n    const getPlaybackState = async () => {\n       let res = await spotifyWebApi.getMyCurrentPlaybackState();\n        if(res.is_playing) {\n            await getPlaybackTrack();\n        }\n    }\n\n    useEffect(() => {\n        getPlaybackState();\n    }, [currentlyPlaying])\n\n    return (\n        <footer className=\"playback\" onClick={getPlaybackTrack}>\n            <div className=\"playbackLeft\">\n                <p>{currentlyPlaying.name}</p>\n                <p>{currentlyPlaying.artists ? currentlyPlaying.artists[0].name : null}</p>\n            </div>\n        </footer>\n    )\n}\n\nexport default Playback;","import React, { useState, useEffect } from 'react';\nimport Spotify from 'spotify-web-api-js'; \nimport { Route, Switch } from 'react-router-dom';\nimport Home from './Components/Home/Home';\nimport Login from './Components/Login/Login';\nimport Library from './Components/Library/Library';\nimport Navbar from './Components/Navbar/Navbar';\nimport DisplayAlbum from './Components/DisplayComponents/DisplayAlbum/DisplayAlbum';\nimport DisplayArtist from './Components/DisplayComponents/DisplayArtist/DisplayArtist';\nimport DisplayPlaylist from './Components/DisplayComponents/DisplayPlaylist/DisplayPlaylist';\nimport DisplayLibraryTracks from './Components/DisplayComponents/DisplayPlaylist/DisplayLibraryTracks';\nimport Playback from './Components/Playback/Playback';\nimport './App.css';\n\nconst spotifyWebApi = new Spotify();\n\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n  \n  const getHashParams = () => {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  const access_token = getHashParams().access_token;\n\n  useEffect(() => {\n    if(access_token) {\n      setLoggedIn(true)\n      spotifyWebApi.setAccessToken(access_token);\n    }\n  })\n\n  if(loggedIn) {\n    return (\n      <div className=\"App\">\n        <Navbar spotifyWebApi={spotifyWebApi} />\n        <Playback spotifyWebApi={spotifyWebApi} />\n        <div className=\"mainContent\">\n          <Switch>\n            <Route path={\"/collection\"}>\n              <Library spotifyWebApi={spotifyWebApi}/>\n            </Route>\n\n            <Route path={\"/album/:id\"}>\n              <DisplayAlbum spotifyWebApi={spotifyWebApi}/>\n            </Route>\n\n            <Route path={\"/artist/:id\"}>\n              <DisplayArtist spotifyWebApi={spotifyWebApi}/>\n            </Route>\n\n            <Route path={\"/playlist/:id\"}>\n              <DisplayPlaylist spotifyWebApi={spotifyWebApi}/>\n            </Route>\n\n            <Route path={\"/tracks\"}>\n              <DisplayLibraryTracks spotifyWebApi={spotifyWebApi}/>\n            </Route>\n            \n            <Route exact path={\"/\"} >\n              <Home spotifyWebApi={spotifyWebApi}/>\n            </Route>\n          </Switch>\n        </div>\n      </div>    \n    );\n  } else {\n    return (\n      <Login />\n    )\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(<Router>\n    <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}